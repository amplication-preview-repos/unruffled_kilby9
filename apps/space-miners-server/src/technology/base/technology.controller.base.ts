/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TechnologyService } from "../technology.service";
import { TechnologyCreateInput } from "./TechnologyCreateInput";
import { Technology } from "./Technology";
import { TechnologyFindManyArgs } from "./TechnologyFindManyArgs";
import { TechnologyWhereUniqueInput } from "./TechnologyWhereUniqueInput";
import { TechnologyUpdateInput } from "./TechnologyUpdateInput";

export class TechnologyControllerBase {
  constructor(protected readonly service: TechnologyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Technology })
  async createTechnology(
    @common.Body() data: TechnologyCreateInput
  ): Promise<Technology> {
    return await this.service.createTechnology({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        cost: true,
        playerLevelRequirement: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Technology] })
  @ApiNestedQuery(TechnologyFindManyArgs)
  async technologies(@common.Req() request: Request): Promise<Technology[]> {
    const args = plainToClass(TechnologyFindManyArgs, request.query);
    return this.service.technologies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        cost: true,
        playerLevelRequirement: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Technology })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async technology(
    @common.Param() params: TechnologyWhereUniqueInput
  ): Promise<Technology | null> {
    const result = await this.service.technology({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
        cost: true,
        playerLevelRequirement: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Technology })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTechnology(
    @common.Param() params: TechnologyWhereUniqueInput,
    @common.Body() data: TechnologyUpdateInput
  ): Promise<Technology | null> {
    try {
      return await this.service.updateTechnology({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          cost: true,
          playerLevelRequirement: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Technology })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTechnology(
    @common.Param() params: TechnologyWhereUniqueInput
  ): Promise<Technology | null> {
    try {
      return await this.service.deleteTechnology({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
          cost: true,
          playerLevelRequirement: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
