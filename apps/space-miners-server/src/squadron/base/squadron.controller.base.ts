/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SquadronService } from "../squadron.service";
import { SquadronCreateInput } from "./SquadronCreateInput";
import { Squadron } from "./Squadron";
import { SquadronFindManyArgs } from "./SquadronFindManyArgs";
import { SquadronWhereUniqueInput } from "./SquadronWhereUniqueInput";
import { SquadronUpdateInput } from "./SquadronUpdateInput";

export class SquadronControllerBase {
  constructor(protected readonly service: SquadronService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Squadron })
  async createSquadron(
    @common.Body() data: SquadronCreateInput
  ): Promise<Squadron> {
    return await this.service.createSquadron({
      data: {
        ...data,

        player: data.player
          ? {
              connect: data.player,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        members: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Squadron] })
  @ApiNestedQuery(SquadronFindManyArgs)
  async squadrons(@common.Req() request: Request): Promise<Squadron[]> {
    const args = plainToClass(SquadronFindManyArgs, request.query);
    return this.service.squadrons({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        members: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Squadron })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async squadron(
    @common.Param() params: SquadronWhereUniqueInput
  ): Promise<Squadron | null> {
    const result = await this.service.squadron({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        members: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Squadron })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSquadron(
    @common.Param() params: SquadronWhereUniqueInput,
    @common.Body() data: SquadronUpdateInput
  ): Promise<Squadron | null> {
    try {
      return await this.service.updateSquadron({
        where: params,
        data: {
          ...data,

          player: data.player
            ? {
                connect: data.player,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          members: true,

          player: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Squadron })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSquadron(
    @common.Param() params: SquadronWhereUniqueInput
  ): Promise<Squadron | null> {
    try {
      return await this.service.deleteSquadron({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          members: true,

          player: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
