/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Ship as PrismaShip,
  Player as PrismaPlayer,
} from "@prisma/client";

export class ShipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ShipCountArgs, "select">): Promise<number> {
    return this.prisma.ship.count(args);
  }

  async ships(args: Prisma.ShipFindManyArgs): Promise<PrismaShip[]> {
    return this.prisma.ship.findMany(args);
  }
  async ship(args: Prisma.ShipFindUniqueArgs): Promise<PrismaShip | null> {
    return this.prisma.ship.findUnique(args);
  }
  async createShip(args: Prisma.ShipCreateArgs): Promise<PrismaShip> {
    return this.prisma.ship.create(args);
  }
  async updateShip(args: Prisma.ShipUpdateArgs): Promise<PrismaShip> {
    return this.prisma.ship.update(args);
  }
  async deleteShip(args: Prisma.ShipDeleteArgs): Promise<PrismaShip> {
    return this.prisma.ship.delete(args);
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.ship
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
