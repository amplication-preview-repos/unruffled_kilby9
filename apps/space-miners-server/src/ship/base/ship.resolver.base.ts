/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ship } from "./Ship";
import { ShipCountArgs } from "./ShipCountArgs";
import { ShipFindManyArgs } from "./ShipFindManyArgs";
import { ShipFindUniqueArgs } from "./ShipFindUniqueArgs";
import { CreateShipArgs } from "./CreateShipArgs";
import { UpdateShipArgs } from "./UpdateShipArgs";
import { DeleteShipArgs } from "./DeleteShipArgs";
import { Player } from "../../player/base/Player";
import { ShipService } from "../ship.service";
@graphql.Resolver(() => Ship)
export class ShipResolverBase {
  constructor(protected readonly service: ShipService) {}

  async _shipsMeta(
    @graphql.Args() args: ShipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ship])
  async ships(@graphql.Args() args: ShipFindManyArgs): Promise<Ship[]> {
    return this.service.ships(args);
  }

  @graphql.Query(() => Ship, { nullable: true })
  async ship(@graphql.Args() args: ShipFindUniqueArgs): Promise<Ship | null> {
    const result = await this.service.ship(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ship)
  async createShip(@graphql.Args() args: CreateShipArgs): Promise<Ship> {
    return await this.service.createShip({
      ...args,
      data: {
        ...args.data,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Ship)
  async updateShip(@graphql.Args() args: UpdateShipArgs): Promise<Ship | null> {
    try {
      return await this.service.updateShip({
        ...args,
        data: {
          ...args.data,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ship)
  async deleteShip(@graphql.Args() args: DeleteShipArgs): Promise<Ship | null> {
    try {
      return await this.service.deleteShip(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  async getPlayer(@graphql.Parent() parent: Ship): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
