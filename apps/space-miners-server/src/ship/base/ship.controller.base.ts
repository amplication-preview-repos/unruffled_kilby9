/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShipService } from "../ship.service";
import { ShipCreateInput } from "./ShipCreateInput";
import { Ship } from "./Ship";
import { ShipFindManyArgs } from "./ShipFindManyArgs";
import { ShipWhereUniqueInput } from "./ShipWhereUniqueInput";
import { ShipUpdateInput } from "./ShipUpdateInput";

export class ShipControllerBase {
  constructor(protected readonly service: ShipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ship })
  async createShip(@common.Body() data: ShipCreateInput): Promise<Ship> {
    return await this.service.createShip({
      data: {
        ...data,

        player: data.player
          ? {
              connect: data.player,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        speed: true,
        cargoCapacity: true,
        power: true,
        name: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ship] })
  @ApiNestedQuery(ShipFindManyArgs)
  async ships(@common.Req() request: Request): Promise<Ship[]> {
    const args = plainToClass(ShipFindManyArgs, request.query);
    return this.service.ships({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        speed: true,
        cargoCapacity: true,
        power: true,
        name: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ship(
    @common.Param() params: ShipWhereUniqueInput
  ): Promise<Ship | null> {
    const result = await this.service.ship({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        speed: true,
        cargoCapacity: true,
        power: true,
        name: true,

        player: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShip(
    @common.Param() params: ShipWhereUniqueInput,
    @common.Body() data: ShipUpdateInput
  ): Promise<Ship | null> {
    try {
      return await this.service.updateShip({
        where: params,
        data: {
          ...data,

          player: data.player
            ? {
                connect: data.player,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          speed: true,
          cargoCapacity: true,
          power: true,
          name: true,

          player: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShip(
    @common.Param() params: ShipWhereUniqueInput
  ): Promise<Ship | null> {
    try {
      return await this.service.deleteShip({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          speed: true,
          cargoCapacity: true,
          power: true,
          name: true,

          player: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
